pico-8 cartridge // http://www.pico-8.com
version 32
__lua__

-- tbc
-- by broquaint

#include utils.lua
#include animation.lua

game_state_menu       = 'menu'
game_state_gaming     = 'gaming'
game_state_splaining  = 'exposition'
game_state_level_done = 'lvldone'
game_state_level_fail = 'lvlfail'
game_state_complete   = 'complete'

play_state_idle = 'idle'
play_state_switch = 'switch'

-- br = 'bottom right',
-- bl = 'bottom left',
-- tr = 'top right',
-- tl = 'top left',

-- tl      tr      bl      br
-- oo xx # xx oo # xx xx # xx xx
-- oo xx # xx oo # xx xx # xx xx
--
-- xx xx # xx xx # oo xx # xx oo
-- xx xx # xx xx # oo xx # xx oo

s_triangle = 'triangle'
s_circle   = 'circle'
s_square   = 'square'

stage1_tiles = {
   {spr_idx=1,  shape=s_triangle, colour={azure=1},   matches={bl=17}},
   {spr_idx=3,  shape=s_triangle, colour={coral=1},   matches={br=20}},
   {spr_idx=5,  shape=s_triangle, colour={lime=1},    matches={tl=5, br=22, cl=21,cr=6}},
   {spr_idx=7,  shape=s_triangle, colour={orange=1},  matches={tr=8, bl=23, cl=7,cr=24}},
   {spr_idx=9,  shape=s_triangle, colour={navy=1},    matches={tl=9}},
   {spr_idx=11, shape=s_triangle, colour={magenta=1}, matches={tr=12}}
}

stage2_tiles = merge({
   {spr_idx=65, shape=s_circle, colour={azure=1},  matches={bl=81}},
   {spr_idx=67, shape=s_circle, colour={coral=1},  matches={br=84}},
   {spr_idx=69, shape=s_circle, colour={lime=1},   matches={tl=69}},
   {spr_idx=71, shape=s_circle, colour={orange=1}, matches={tr=72}}
}, stage1_tiles)

stage3_tiles = merge({
   {spr_idx=129, shape=s_square, colour={azure=1},  matches={bl=145}},
   {spr_idx=131, shape=s_square, colour={coral=1},  matches={br=148}},
   {spr_idx=133, shape=s_square, colour={lime=1},   matches={tl=133}},
   {spr_idx=135, shape=s_square, colour={orange=1}, matches={tr=136}},
}, stage2_tiles)

tile_size  = 12
space_size = 13

tile_id = 1
tally = {}
function make_tile(gx, gy, x, y)
   local tile = stage1_tiles[randx(#stage1_tiles)]
   x = x and x or gx*tile_size+gx
   y = y and y or gy*tile_size+gy
   local tid = tile_id
   tile_id += 1
   return merge(copy_table(tile), {
      gx = gx,
      gy = gy,
      x = x,
      y = y,
      id = tid
   })
end

function _init()
   anims={}
   frame_count = 0
   last_transition = 0
   current_game_state = game_state_gaming
   current_play_state = play_state_idle
   grid={}
   for i = 1,6 do
      grid[i] = {}
      for j = 1,6 do
         grid[i][j] = make_tile(i, j)
      end
   end
   tally = {
      diamond = 0,
      window = 0,
   }
end

function gt(gx, gy)
   local row = grid[gx]
   if(row == nil) return nil
   return row[gy]
end

function set_game_state(s)
   last_transition = frame_count
   current_game_state = s
end

function set_play_state(s)
   last_transition = frame_count
   current_play_state = s
end

function in_play_state(...)
   for v in all({...}) do
      if v == current_play_state then
         return true
      end
   end
   return false
end

function animate_obj_move(a)
   local fc, from, to, obj, slot = a.frames, a.from, a.to, a.obj, a.slot
   for f = 1, fc do
      obj[slot] = lerp(from, to, easeoutquad(f/fc))
      yield()
   end    
end

function swap_grid_tiles(a, b)
   local ax, ay = a.gx, a.gy
   local bx, by = b.gx, b.gy

   grid[ax][ay] = b
   grid[bx][by] = a

   a.gx = bx
   a.gy = by
   b.gx = ax
   b.gy = ay
end

function animate_y_move(args)
   animate_object_with(merge({slot = 'y'}, args), animate_obj_move)
end

swap_frame_count = 10
function animate_tile_swap(ta, tb, slot)
   local to = tb[slot]
   animate_object_with({
         obj  = tb,
         from = tb[slot],
         to   = ta[slot],
         slot = slot,
         frames = swap_frame_count,
   }, animate_obj_move)
   animate_object_with({
         obj  = ta,
         from = ta[slot],
         to   = to,
         slot = slot,
         frames = swap_frame_count,
         cb = function()
            swap_grid_tiles(ta, tb)
         end
   }, animate_obj_move)
end

function animate_player_move(direction)
   local anim_args = {
      frames = swap_frame_count,
      obj = player,
      cb = finish_swap
   }

   if direction.x != nil then
      local from_x = player.x
      local to_x   = from_x + direction.x
      merge(anim_args, {
            from   = from_x,
            to     = to_x,
            slot   = 'x'
      })

      player.gx += sgn(direction.x) * 1

      if player.held then
         local other_tile = grid[player.gx][player.gy]
         player.other_tile = other_tile
         animate_tile_swap(player.tile_held, other_tile, 'x')
      end
   end

   if direction.y != nil then
      local from_y = player.y
      local to_y   = from_y + direction.y
      merge(anim_args, {
            from   = from_y,
            to     = to_y,
            slot   = 'y'
      })

      player.gy += sgn(direction.y) * 1

      if player.held then
         local other_tile = grid[player.gx][player.gy]
         player.other_tile = other_tile
         animate_tile_swap(player.tile_held, other_tile, 'y')
      end
   end

   animate_object_with(anim_args, animate_obj_move)
end

function all_shape_of(shape, b, c, d)
   if(not b or not c or not d) return false
   return every({b,c,d}, function(t) return t.shape == shape end)
end

function not_matched(t)
   return not t.in_match
end

match = {
   br = 'br',
   bl = 'bl',
   tr = 'tr',
   tl = 'tl'
}
-- pos order br -> bl -> tr -> tl
diamond_matches = {
   br = { pos = {{ 1,  0}, { 0,  1}, { 1, 1}}, matches = { match.bl, match.tr, match.tl } },
   bl = { pos = {{-1,  0}, {-1,  1}, { 0, 1}}, matches = { match.br, match.tr, match.tl } },
   tr = { pos = {{ 0, -1}, { 1, -1}, { 1, 0}}, matches = { match.br, match.bl, match.tl } },
   tl = { pos = {{-1, -1}, { 0, -1}, {-1, 0}}, matches = { match.br, match.bl, match.tr } },
}

-- pos order  tr, tl, bl, br
window_matches = {
   tl = { pos = {{ 1,  0}, { 0,  1}, { 1, 1}}, matches = { match.tr, match.bl, match.br } },
   tr = { pos = {{-1,  0}, {-1,  1}, { 0, 1}}, matches = { match.tl, match.bl, match.br } },
   bl = { pos = {{ 0, -1}, { 1, -1}, { 1, 0}}, matches = { match.tl, match.tr, match.br } },
   br = { pos = {{-1, -1}, { 0, -1}, {-1, 0}}, matches = { match.tl, match.tr, match.bl } }
}

function check_for_patterns(tile)
   function rel_tile(t, pos)
      return gt(t.gx + pos[1], t.gy + pos[2])
   end

   function check_pattern(pattern, a)
      for k, v in pairs(pattern) do
         if(on == 'colour') dump('checking ', k, ' on ', on , ' with ', v)
         if a.matches[k] then
            local p = v.pos
            local b, c, d = rel_tile(a, p[1]), rel_tile(a, p[2]), rel_tile(a, p[3])
            local m = v.matches
            if  all_shape_of(a.shape, b, c, d) and every({a,b,c,d}, not_matched)
            and b.matches[m[1]] and c.matches[m[2]] and d.matches[m[3]] then
               for t in all({a,b,c,d}) do t.in_match=true end
               return {[k]=a,[m[1]]=b,[m[2]]=c,[m[3]]=d}
            end
         end
      end
      return false
   end

   if(tile == nil) return false

   local m = check_pattern(diamond_matches, tile)
   if m then
      return { type = 'diamond', matched = m }
   end

   local m = check_pattern(window_matches, tile)
   if m then
      return { type = 'window', matched = m }
   end

   return false
end

function animate_match(matched)
   set_play_state('matched')

   for m, t in pairs(matched) do t.matched = m end
   wait(10)
   for _,t in pairs(matched) do t.matched = nil end
   wait(7)
   for m, t in pairs(matched) do t.matched = m end
   wait(13)
   for _,t in pairs(matched) do t.matched = nil end
   wait(9)
   for m, t in pairs(matched) do t.matched = m end
   wait(15)
   for _,t in pairs(matched) do
      t.matched = nil
      t.in_match = false
   end

   local br, bl = matched.br, matched.bl

   local moved = {}
   -- Calculate and create the tiles to move.
   for i = 1,br.gy + 1 do
      if i < 3 then
         -- This doesn't look quite right ... but that's fine.
         add(moved, {
                make_tile(br.gx, i, br.x, -((i+1) * tile_size + i)),
                gt(br.gx, i)
         })
         add(moved, {
                make_tile(bl.gx, i, bl.x, -((i+1) * tile_size + i)),
                gt(bl.gx, i)
         })
      else
         add(moved, {gt(br.gx, i-2), gt(br.gx, i)})
         add(moved, {gt(bl.gx, i-2), gt(bl.gx, i)})
      end
   end

   -- Add the new tiles to the grid and trigger move animation.
   for t in all(moved) do
      local new, old = t[1], t[2]
      grid[old.gx][old.gy] = new
      animate_y_move({
            obj  = new,
            from = new.y,
            to   = old.y,
            frames = 30,
            cb = function()
               new.gx = old.gx
               new.gy = old.gy
               t.in_match = false
            end
      })
   end

   -- Lazy hack to wait for animations to finish.
   wait(30)

   player.held = false
   -- TODO add matches to a table somewhere ...
   set_play_state('idle')
end

function check_for_matches(tile)
   local match = check_for_patterns(tile)
   if match then
--         dump('nice match: ', match)
      tally[match.type] += 1
      animate(function() animate_match(match.matched) end)
   end
   return not not match
end

function finish_swap(args)
   if not player.disable_matches then
      local c1 = check_for_matches(player.tile_held)
      local c2 = check_for_matches(player.other_tile)
      if not c1 and not c2 then
         set_play_state('idle')
      else
         dump('got a match!')
         player.tile_held  = nil
      end
   else
      set_play_state('idle')
      debug('current tile: ', grid[player.gx][player.gy])
   end
   player.other_tile = nil
end

player = {
   x = 3*space_size,
   y = 3*space_size,
   gx = 3,
   gy = 3,
   held = false
}
move = {
   left  = { x = -space_size },
   right = { x = space_size  },
   up    = { y = -space_size },
   down  = { y = space_size  }
}

function _update()
   if btnp(b_left) and in_play_state('idle') then
      set_play_state('switch')
      animate_player_move(move.left)
   end
   if btnp(b_right) and in_play_state('idle') then
      set_play_state('switch')
      animate_player_move(move.right)
   end
   if btnp(b_up) and in_play_state('idle') then
      set_play_state('switch')
      animate_player_move(move.up)
   end
   if btnp(b_down) and in_play_state('idle') then
      set_play_state('switch')
      animate_player_move(move.down)
   end
   if btnp(b_x) and in_play_state('idle') then
      player.held = not player.held
      player.tile_held = player.held and grid[player.gx][player.gy] or nil
   end

   if btnp(b_z) then
      if(DEBUG) player.disable_matches = not player.disable_matches
   end

   frame_count += 1
   run_animations()
end

-- diamond match offsets
dmo = {
   br = { x = 8, y = 8 },
   bl = { x = 0, y = 8 },
   tr = { x = 8, y = 0 },
   tl = { x = 0, y = 0 },
}

function _draw()
   cls(navy)

   -- Draw grid
   rectfill(tile_size+1, tile_size+1, 7 * tile_size + 9, 7 * tile_size + 9, silver)

   -- Draw tiles
   for i = 1,6 do
      for j = 1,6 do
         local gs = grid[i][j]
         if gs then
            if gs.matched then
               rectfill(gs.x+2, gs.y+2, gs.x+space_size, gs.y+space_size, white)
               local xo, yo = dmo[gs.matched].x, dmo[gs.matched].y
               spr(gs.matches[gs.matched], gs.x + xo, gs.y + yo)
            else
               spr(gs.spr_idx, gs.x, gs.y, 2, 2)
            end
         end
      end
   end

   if not in_play_state('matched') then
      local px0 = player.x + 1
      local py0 = player.y + 1
      local px1 = (px0 + space_size)
      local py1 = (py0 + space_size)
      local col = player.disable_matches and lime or player.held and red or yellow
      rect(px0-1, py0-1, px1+1, py1+1, col)
   end

   -- draw ui
   print(tally.diamond, 18, 100, white)
   spr(33, 12, 108, 2, 2)
   print(tally.window,  38, 100, white)
   spr(35, 32, 108, 2, 2)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000c1111111111100002222222222220000bbbbbbbbb33300004449999999990000111111111111000022222222222200000000000000000000000000
0007700000c77777777771000027777777777e0000bbbbb37777730000477777499999000011111c77777c0000e77777e2222200000000000000000000000000
0007700000c77777777771000027777777777e0000bbbb37777773000047777774999900001111c777777c0000e777777e222200000000000000000000000000
0070070000c77777777771000027777777777e0000bbb37777777b00009777777749990000111c7777777c0000e7777777e22200000000000000000000000000
0000000000c77777777771000027777777777e0000bb377777777b0000977777777499000011c77777777c0000e77777777e2200000000000000000000000000
0000000000c77777777771000027777777777e0000b3777777777b000097777777774900001c777777777c0000e777777777e200000000000000000000000000
0000000000c17777777771000027777777772e0000b7777777773b0000947777777779000017777777777c0000e7777777777200000000000000000000000000
0000000000cc177777777100002777777772ee0000b777777773bb0000994777777779000017777777777c0000e7777777777200000000000000000000000000
0000000000ccc1777777710000277777772eee0000b77777773bbb0000999477777779000017777777777c0000e7777777777200000000000000000000000000
0000000000cccc17777771000027777772eeee000037777773bbbb0000999947777774000017777777777c0000e7777777777200000000000000000000000000
0000000000ccccc177777100002777772eeeee00003777773bbbbb0000999994777774000017777777777c0000e7777777777200000000000000000000000000
0000000000ccccccccccc10000eeeeeeeeeeee0000333bbbbbbbbb000099999999944400001ccccccccccc0000eeeeeeeeeee200000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000002ec1000000001111112222220000777779b7777700000000000000000000000000000000000000000000000000000000000000000000000000
00000000000002eecc1000000011111ce222220000777779b7777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000002eeeccc10000001111c77e22220000777779b7777700000000000000000000000000000000000000000000000000000000000000000000000000
000000000002eeeecccc100000111c7777e222000077777437777700000000000000000000000000000000000000000000000000000000000000000000000000
00000000002eeeeeccccc1000011c777777e22000077777437777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000eeeeeecccccc00001c77777777e20000999444333bbb00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000999999bbbbbb0000c1777777772e0000bbb33344499900000000000000000000000000000000000000000000000000000000000000000000000000
0000000000499999bbbbb30000cc17777772ee000077777347777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000049999bbbb300000ccc177772eee000077777347777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000004999bbb3000000cccc1772eeee000077777b97777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000499bb30000000ccccc12eeeee000077777b97777700000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000049b300000000cccccceeeeee000077777b97777700000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c1111111111100002222222222220000bbbbbbbbbbbb00004999999999990000c11111111111000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbbbb7777300004777799999990000c77777777771000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbbb77777300004777779999990000c77777777771000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbb677777300004777776999990000c77777777771000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbb6777777300004777777699990000c77777777771000000000000000000000000000000000000000000
0000000000cc777777777100002777777777ee0000bbb67777777300004777777769990000cc7777777771000000000000000000000000000000000000000000
0000000000ccc6777777710000277777776eee0000bb777777777300004777777777990000ccc677777771000000000000000000000000000000000000000000
0000000000cccc67777771000027777776eeee0000b7777777777300004777777777790000cccc67777771000000000000000000000000000000000000000000
0000000000ccccc677777100002777776eeeee0000b7777777777300004777777777790000ccccc6777771000000000000000000000000000000000000000000
0000000000cccccc7777710000277777eeeeee0000b7777777777300004777777777790000cccccc777771000000000000000000000000000000000000000000
0000000000ccccccc77771000027777eeeeeee0000b7777777777300004777777777790000ccccccc77771000000000000000000000000000000000000000000
0000000000ccccccccccc10000eeeeeeeeeeee000033333333333300004444444444490000ccccccccccc1000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000006ccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000006ccccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006ccccccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000cccccccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000cccccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000cccccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000cccccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000cccccccccccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000cccccccccccc0000000000000000000000000000bbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
0000000000ccccccccccc60000000000000000000000000000bbbbb7000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ccccccccc600000000000000000000000000000bbbb67000000000000000000000000000000000000000000000000000000000000000000000000
000000000000ccccccc6000000000000000000000000000000bbb677000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000cccc00000000000000000000000000000000bb6777000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000b77777000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c1111111111100002222222222220000bbbbbbbbbbbb00004999999999990000000000000000000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbb377777300004777774999990000000000000000000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbb377777300004777774999990000000000000000000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbb377777300004777774999990000000000000000000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000bbbbb377777300004777774999990000000000000000000000000000000000000000000000000000000000
0000000000c77777777771000027777777777e0000b3333377777300004777774444490000000000000000000000000000000000000000000000000000000000
0000000000c11111777771000027777722222e0000b7777777777300004777777777790000000000000000000000000000000000000000000000000000000000
0000000000ccccc177777100002777772eeeee0000b7777777777300004777777777790000000000000000000000000000000000000000000000000000000000
0000000000ccccc177777100002777772eeeee0000b7777777777300004777777777790000000000000000000000000000000000000000000000000000000000
0000000000ccccc177777100002777772eeeee0000b7777777777300004777777777790000000000000000000000000000000000000000000000000000000000
0000000000ccccc177777100002777772eeeee0000b7777777777300004777777777790000000000000000000000000000000000000000000000000000000000
0000000000ccccccccccc10000eeeeeeeeeeee000033333333333300004444444444490000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000aaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000aaaaaaa900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000aaaaaaaaa90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaaa77aaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaa777aaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aaa777aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aa7777aaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aa77aaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
009aaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0009aaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00009aaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000aaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
