pico-8 cartridge // http://www.pico-8.com
version 30
__lua__

-- Brain won't map colours to numbers so get computer to do it
black    = 0 navy     = 1 magenta  = 2 green    = 3
brown    = 4 dim_grey = 5 silver   = 6 white    = 7
red      = 8 orange   = 9 yellow   = 10 lime    = 11
azure    = 12 violet  = 13 salmon  = 14 coral   = 15

screen_width = 128

dir_left  = -1
dir_right = 1

b_left  = ‚¨ÖÔ∏è b_right = ‚û°Ô∏è
b_down  = ‚¨áÔ∏è b_up    = „Éå„Å¶‚óè
b_x     = ‚ùé  b_z     = üÖæÔ∏è

g_dt           = 1/30
g_friction     = 0.9
g_air_friction = 0.98
g_top_speed    = 3
g_top_boost    = 10
-- The speed at which a jump starts to build up on a ramp.
g_jump_speed   = 5

g_edge_rhs  = 64
g_edge_lhs  = 16

g_racing_line = 118
g_car_line    = g_racing_line - 6

r_step = 1 / 360

spr_tree   = { 0,  32, 8,  16 }
spr_shrub  = { 8,  32, 16, 8  }
spr_player = { 8,  0,  8,  8  }
spr_boost  = { 16, 0,  8,  8  }
spr_flag   = { 24, 32, 16, 16 }

spr_villa_savoye = { 48, 46, 31, 18 }
spr_villa_palladio = { 80, 40, 32, 23 }

function _init()
   car = {
      x = 16,
      y = g_car_line,
      dir = dir_right,
      speed = 0,
      accel = 0.4,
      dy = 0,
      jumping = false,
      past = {},
      len = 0,
      boosted_at = false,
      boost_meter = 0
   }

   local trans_spr = (
      {{spr_villa_savoye, { 900, 87 }}, {spr_villa_palladio, { 900, 81 }}}
   )[randx(2)]

   level = {
      length = 1000,
      transition_spr = trans_spr[1],
   }

   scene = { make_bg_spr(spr_flag, { 0, 88 }) }

   ramps = {}
   boosters = {}
   platforms = {}

   populate_scenery()
   populate_geometry()

   add(scene, make_bg_spr(level.transition_spr, trans_spr[2]))
end

function make_obj(pos, attr)
   return merge(
      { at = pos, orig_at = copy_table(pos) },
      attr
   )
end

function make_bg_spr(spr, at)
   return make_obj(at, { spr = spr, width = spr[3] })
end

function make_ramp(attr)
   -- With ramps the length of the hypoteneuse determines how wide the ramp is.
   local w = abs(attr.hypot * cos(attr.angle * r_step))
   return make_obj({ attr.x, g_racing_line }, merge(attr, { width = w }))
end

function make_booster(attr, at) return make_obj({ attr.x, g_racing_line }, attr) end

function populate_scenery()
   local x = 15
   local last_point = level.length - screen_width

   while x < last_point do
      local new_x   = x + randx(50)
      local new_obj = randx(2) == 1
         and make_bg_spr(spr_tree,  { new_x, 85 })
         or  make_bg_spr(spr_shrub, { new_x, 95 })

      add(scene, new_obj)

      x += 60 -- Seems about right?
--      debug('added scenery ', scene[#scene])
   end
end

function populate_geometry()
   local x = 30
   local last_point = level.length - screen_width

   while x < last_point do
      local new_x = x + randx(30)

      add(boosters, make_booster(
             { x = new_x, boost = 1 + rnd()/2, width = randx(30) + 10 }
      ))

      local l = make_ramp(
         { x = new_x + 50, angle = randx(25) + 10, hypot = randx(20) + 30 }
      )
      local r = make_ramp(
         { x = l.at[1] + l.width, angle = 180 - l.angle, hypot = l.hypot }
      )

      add(ramps, l)
      add(ramps, r)

      x += 300
   end
end

----------------------
-- UPDATE functions --
----------------------

function track_car()
   if(not DEBUG_GFX) return

   while #car.past > 50 do
      deli(car.past, 1)
   end

   add(car.past, {x = car.x, y = car.y + 8})
end

function respect_incline(r)
   if r.angle < 90 then
      car.speed -= 0.1
   else
      car.speed += 0.1
   end
   car.dy += 0.2
end

function apply_gravity()
   -- The number used here feels about right, is arbitrary.
   car.dy += 35 * g_dt
   car.y += car.dy * g_dt

   -- TODO Implement a bounce!
   if car.y > g_car_line then
      car.y = g_car_line
      car.dy = 0
      car.jumping = false
   else
      car.jumping = true
      -- debug('car.y = ', car.y, ', car.dy = ', car.dy)
   end
end

function on_ramp(car_x)
   car_x += 4
   for r in all(ramps) do
      local rx0 = r.angle < 90 and r.at[1] or r.at[1] + r.width
      if r.angle < 90 then
         local rx1 = ramp_trig(rx0, r.at[2], r.hypot, r.angle)
         if car_x > rx0 and car_x < rx1 then
            return r
         end
      else
         local rx1 = ramp_trig(rx0, r.at[2], r.hypot, r.angle)
         if car_x > rx1 and car_x < rx0 then
            return r
         end
      end
   end
   return false
end

function on_booster()
   for b in all(boosters) do
      if (car.x+4) > b.at[1] and (car.x+4) < (b.at[1] + b.width)
      and car.y == g_car_line then
         return b
      end
   end
   return false
end

function still_boosting()
   local boost_active = car.boosted_at and t() - car.boosted_at < 0.5
   local boost_power  = car.boost_meter > 0
   return boost_active or boost_power
end

function handle_ramp(r)
   if r.angle < 90 then
      -- These are offsets relative to where the car is on the ramp.
      local car_x = (car.x+4) - r.at[1]
      local car_y = max(car.speed, g_car_line - car.y)
      -- Rough calculation of the current position along the hypoteneuse.
      -- It's rough because car_y is just a reasonable guess.
      local len   = sqrt((car_x*car_x)+(car_y*car_y))
      local new_y = len * sin(r.angle * r_step)
      car.y = min(g_car_line, g_car_line + new_y)

      car.len = len

      if car.speed > g_jump_speed then
         local new_dy = car.dy - (0.03 * r.angle)
         if(car.boosted_at) new_dy *= 3
         car.dy = abs(new_dy) > 32 and -32 or new_dy
      elseif btn(b_left) then
         car.speed -= car.accel
         car.dy += 10
      end
      debug('-> on l2r ramp ', r, ', car ', car)
   else
      -- These are offsets relative to where the car is on the ramp.
      local car_x = (r.at[1]+r.width) - car.x
      local car_y = max(car.speed, g_car_line - car.y)
      -- Rough calculation of the current position along the hypoteneuse.
      -- It's rough because car_y is just a reasonable guess.
      local len   = sqrt((car_x*car_x)+(car_y*car_y))
      local new_y = len * sin(r.angle * r_step)

      car.y = min(g_car_line, g_car_line + new_y)

      car.len = len

      if abs(car.speed) > g_jump_speed then
         local new_dy = car.dy - (0.03 * r.angle)
         if(car.boosted_at) new_dy *= 3
         car.dy = abs(new_dy) > 32 and -32 or new_dy
      elseif btn(b_right) then
         car.speed += car.accel
         car.dy += 10
      end
      debug('<- on r2l ramp ', r, ', car ', car)
   end

   -- Initiate jump if on the next frame car is not on this ramp and
   -- has a negative vertical inertia.
   if r != on_ramp(car.x + car.speed) and car.dy < 0 then
      car.jumping = true
   end

   if not accelerating then
      respect_incline(r)
   end
end

function update_car()
   local accelerating = btn(b_right) or btn(b_left)

   local sw = car.speed
   if btn(b_right) then
      if car.dir != dir_right and car.speed >= 0 then
         car.dir = dir_right
      end

      if (car.speed + car.accel) < g_top_speed then
         car.speed += car.accel
      end
   end

   if btn(b_left) then
      if car.dir != dir_left and car.speed < 0 then
         car.dir = dir_left
      end

      if not car.jumping and abs(car.speed - car.accel) < g_top_speed then
         car.speed -= car.accel
      end
      -- Allow slowing down back to normal speed
      -- TODO handle going left!
      if car.jumping and car.speed > g_top_speed then
         car.speed -= car.accel/3
      end
   end

   -- debug('was going ', sw, ' now going ', car.speed, ' with boost ', car.boost_meter, ' boost amt ', car.boost_was, ' last boost at ', car.boosted_at)

   local r = on_ramp(car.x)

   if not still_boosting() then
      -- TODO Make this more gradual, probably need to move away from linear speed.
      if not car.jumping then
         car.speed *= g_friction
         if not accelerating  then
            car.speed *= g_friction
         end
      else
         car.speed *= g_air_friction
      end

      if r then
         -- TODO Improve friction relative to ramp.
         car.speed *= g_friction * 0.95 - (r.angle/1000)
      end

      car.boosted_at = false
   end

   -- Reduce boost if on the ground or in the air and "breaking"
   local break_button = car.dir == dir_right and b_left or b_right
   if still_boosting() and (not car.jumping and t() - car.boosted_at > 0.3) or btn(break_button) then
      if car.boost_meter > 0 then
         if btn(break_button) then
            car.boost_meter *= (car.boost_meter > 1) and 0.9 or 0
         else
            car.boost_meter -= 1
         end
      end
   end

   local b = on_booster()
   if b and car.speed < g_top_boost then
      -- TODO implement a max speed ... but going insanely fast is fun.
      car.speed += sgn(car.speed) * b.boost
      car.boosted_at  = t()
      car.boost_meter = 32
      car.boost_was   = b.boost
   end

   track_car()

   local next_pos = car.x + car.speed
   if next_pos > g_edge_lhs and next_pos < g_edge_rhs then
      car.x += car.speed
      -- TODO Don't update what ought to be a constant!
      g_edge_lhs += 1
   elseif next_pos > g_edge_rhs then
      car.x = g_edge_rhs
      g_edge_lhs = g_edge_rhs
   end

   -- TODO Handle landing on a ramp!
   if r and not car.jumping then
      handle_ramp(r)
   else
      apply_gravity()
   end
end

function horizon_offset(y)
   return y - (0.1 * (g_car_line - car.y))
end

function update_scene()
   local function update_pos(obj)
      local x = obj.at[1] + -car.speed
      if x < 0 and x > -64 then
         obj.at[1] = x
      else
         obj.at[1] = x % level.length
      end
      -- Only move bg sprites but not flag or transition.
      if obj.spr and obj.spr != scene[#scene].spr and obj.spr != scene[1].spr then
         obj.at[2] = horizon_offset(obj.orig_at[2])
      end
   end

   foreach(scene, update_pos)
   foreach(ramps, update_pos)
   foreach(boosters, update_pos)
   foreach(platforms, update_pos)
end

function _update()
   update_scene()

   update_car()

   if btnp(b_z) then
      DEBUG = not DEBUG
   end
end

----------------------
-- DRAW functions --
----------------------

function ramp_trig(x, y, hypot, angle)
   local rx = x + (hypot * cos(angle * r_step))
   local ry = y + (hypot * sin(angle * r_step))
   return rx, ry
end

function render_sprite(sxywh, x, y, flip_x, flip_y)
   local s = copy_table(sxywh)
   add(s, x)
   add(s, y)
   add(s, sxywh[3])
   add(s, sxywh[4])
   if(flip_x != nil) add(s, flip_x)
   if(flip_y != nil) add(s, flip_y)
   sspr(unpack(s)) -- Could be done with spr, too lazy to change.
end

-- Handle drawing in objects that are about to "wrap in" from the LHS.
function wrapped_x(obj)
   local x = obj.at[1]
   if (x + obj.width) > level.length then
      return -obj.width - (1000 - (x + obj.width))
   else
      return x
   end
end

-- Only bother rendering objects that will be on screen.
function should_draw(x, w)
   return x > -w and x < 128
end

function draw_ramp(r, rx)
   local ry = r.at[2]
   local x, y

   -- Slope going up from the left
   if r.angle < 90 then
      x, y = ramp_trig(rx, ry, r.hypot, r.angle)
      line(rx, ry, x, y, yellow)
   else
      rx += r.width
      -- Other edge going up from the right
      x, y = ramp_trig(rx, ry, r.hypot, r.angle)
      -- Need offset to draw&= correctly while maintaining consistent x coordinate
      line(rx, ry, x, y, lime)
   end

   local slope = r.angle
   -- Fill the ramp with solid colour.
   if r.angle < 90 then
      while slope >= 0 do
         local lx, ly = ramp_trig(rx, ry, r.hypot, slope)
         local d   = r.angle - slope
         local col = (d < 5) and yellow or (d < 20) and orange or red
         line(rx, ry, x, ly, col)
         -- line(x, ly, opx, ry, col)
         slope -= 1
      end
   else
      while slope < 182 do
         local lx, ly = ramp_trig(rx, ry, r.hypot, slope)
         local d   = slope - r.angle
         local col = (d < 5) and lime or (d < 20) and green or azure
         line(rx, ry, x, ly, col)
         slope += 1
      end
   end
end

function draw_scene()
   for obj in all(scene) do
      local x = wrapped_x(obj)
      if should_draw(x, obj.width) then
         -- Flag fiddliness, prolly worth splitting it out.
         if obj.spr == spr_flag then
            palt(0, false)
            palt(1, true)
         else
            palt()
         end

         render_sprite(obj.spr, x, obj.at[2])
      end
   end

   palt()

   for r in all(ramps) do
      local rx = wrapped_x(r)

      if should_draw(rx, r.width) then
         draw_ramp(r, rx)
      end
   end

   for b in all(boosters) do
      local bx0 = wrapped_x(b)
      if should_draw(bx0, b.width) then
         local bx1 = bx0 + b.width
         line(bx0, g_racing_line, bx1, g_racing_line, yellow)
         line(bx0, g_racing_line + 1, bx1, g_racing_line + 1, orange)
         line(bx0, g_racing_line + 2, bx1, g_racing_line + 2, red)
      end
   end


   for p in all(platforms) do
      if p.at[1] > -p.width and p.at[1] < 128 then
         local px = p.at[1]
         local py = p.at[2]
         rectfill(px, py, px + p.width, py - 2, orange)
      end
   end
end

function draw_ewe_ai()
   rectfill(92, 2, 124, 8, white)
   if car.boost_meter > 0 then
      rectfill(92, 2, 92 + car.boost_meter, 8, orange)
      print('boost', 94, 3, yellow)
   else
      print('boost', 94, 3, salmon)
   end

   local dbg = DEBUG and 'üê±' or '@'
   print(dumper(dbg, ' ', flr(car.x), 'x', flr(car.y), ' -> ', car.speed), 2, 2, azure)
end

function draw_car_debug()
   if(not DEBUG_GFX) return

   for pos in all(car.past) do
      pset(pos.x, pos.y, white)
   end

   local r = on_ramp(car.x)
   if r then
      line(r.at[1], r.at[2], (car.x+4), car.y+8, lime)
      line(r.at[1], r.at[2], r.at[1]+car.len, r.at[2], azure)
   end
end

function draw_car()
   draw_car_debug()

   local flip = car.dir == dir_left
   if still_boosting() then
      local bx = flip and car.x + 8 or car.x - 8
      render_sprite(spr_boost, bx, car.y, flip)
   end

   render_sprite(spr_player, car.x, car.y, flip)
end

function _draw()
   cls(silver)

   draw_ewe_ai()

   -- Background layer.
   rectfill(0, horizon_offset(100), 128, 105, violet)
   rectfill(0, 105, 128, 128, navy)

   draw_scene()

   draw_car()
end

----------------------
-- UTILITY functions --
----------------------

DEBUG_GFX = false
DEBUG = false

function dumper(...)
   local res = ''
   for v in all({...}) do
      if type(v) == 'table' then
         res = res .. tbl_to_str(v)
      elseif type(v) == 'number' then
         res = res .. ( v % 1 == 0 and v or nice_pos(v) )
      else
         res = res .. tostr(v)
      end
   end
   return res
end

function debug(...)
   if(not DEBUG) return

   printh(dumper(...))
end

function tbl_to_str(a)
   local res = '{'
   for k, v in pairs(a) do
      local lhs = type(k) != 'number' and k .. ' => ' or ''
      res = res .. lhs .. dumper(v) .. ', '
   end
   return sub(res, 0, #res - 2) .. "}"
end

function copy_table(tbl)
   local ret = {}
   for i,v in pairs(tbl) do
      if(type(v) == 'table') then
         ret[i] = copy_table(v)
      else
         ret[i] = v
      end
   end
   return ret
end

function merge(t1,t2)
   for k,v in pairs(t2) do t1[k] = v end
   return t1
end

-- Random index.
function randx(n)
   return flr(rnd(n)) + 1
end

function nice_pos(inms)
   local sec = flr(inms)
   local ms  = flr(inms * 100 % 100)
   if(ms == 0) then
      ms = '00'
   elseif(ms < 10) then
      ms = '0' .. ms
   end
   return sec .. '.' .. ms
end

__gfx__
0000000000aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000aacaca00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000aacaca00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000a9aaaa000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000aa99aa00007999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000566665000aa889a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000575665750007999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000500005000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000099999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000955995590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055005500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033300000000000000000011555511111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000003333330000011555511111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000033333733000011155770077007710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000033733333300011155770077007710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000333333333300011155007700770010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333330000373337373000011155007700770010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333333000333733333000011155770077007710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03344433000044455440000011155770077007710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444400000000000000000011155111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444400000000000000000011155111111111110000000000000000000000000000000000000000000000000000000fff000000000000000000000000000000
004444000000000000000000111551111111111100000000000000000000000000000000000000000000000000000ff777ff0000000000000000000000000000
0044440000000000000000001115513111111111000000000000000000000000000000000000000000000000000ff7777777ff00000000000000000000000000
00444400000000000000000013155131111111110000000000000000000000000000000000000000000000000ff77777777777ff000000000000000000000000
044444400000000000000000131553311111111100000000000000000000000000000000000000000000000ffffffffffffffffff00000000000000000000000
044444400000000000000000113533111111111100000000000000dd777000000000000000000000000000005757757577575775000000000000000000000000
444444440000000000000000113333111111111100000000000000dd777000000000000000000000000000005775757757577575000000000000000000000000
00000000000000000000000000000000000000000000000000777777777777777777777777777700000000009999999999999999000000000000000000000000
0000000000000000000000000000000000000000000000000074444444444444444444444444470000000ff444774447744477444ff000000000000000000000
0000000000000000000000000000000000000000000000000074dd664666646666466634333d4700000ff77747dd747dd747dd74777ff0000000000000000000
0000000000000000000000000000000000000000000000000074d6664666646633433334333d47000ff7777747dd747dd747dd7477777ff00000000000000000
00000000000000000000000000000000000000000000000000746666466664633343333433dd470ff777777747777477774777747777777ff000000000000000
0000000000000000000000000000000000000000000000000074444444444444444444444444470fffffffff4ffff4ffff4ffff4fffffffff000000000000000
00000000000000000000000000000000000000000000000000777777777777777777777777777700777777774777747777477774777777770000000000000000
0000000000000000000000000000000000000000000000000000077000007700000770000077000077ddd77747dd747dd747dd74777ddd770000000000000000
0000000000000000000000000000000000000000000000000000077000007700000770000077000077ddd77747dd747dd747dd74777ddd770000000000000000
0000000000000000000000000000000000000000000000000000077000007700000770000077000077ddd77747dd747dd747dd74777ddd770000000000000000
0000000000000000000000000000000000000000000000000000077000007700000770000077000077ddd77747dd747dd747dd74777ddd770000000000000000
00000000000000000000000000000000000000000000000000000770000077555557700000770000ffffffff4ffff4fddf4ffff4ffffffff0000000000000000
00000000000000000000000000000000000000000000000000000775555577555557755555770000777777774777747dd7477774777777770000000000000000
000000000000000000000000000000000000000000000000005557755555775555577555557755507777777444ff444dd444ff44477777770000000000000000
000000000000000000000000000000000000000000000000005555555555555555555555555555507777777fff777777777777fff77777770000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000007777777ffffffffffffffffff77777770000000000000000
__label__
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
666c666666ccc6c6c6c6c6cc66cc66ccc66666666666666666ccc6c6c6ccc6666666666666666666666666666666777777777777777777777777777777777666
66c6c6666666c6c6c6c6c66c666c6666c66666666666666666c6c6c6c6c6c666666666666666666666666666666677eee77ee77ee77ee7eee777777777777666
66c6c666666cc6ccc66c666c666c66ccc66666ccc66666ccc6ccc6ccc6c6c666666666666666666666666666666677e7e7e7e7e7e7e7777e7777777777777666
66c666666666c666c6c6c66c666c66c6666666666666666666c6c666c6c6c666666666666666666666666666666677ee77e7e7e7e7eee77e7777777777777666
666cc66666ccc666c6c6c6ccc6ccc6ccc66666666666666666ccc666c6ccc666666666666666666666666666666677e7e7e7e7e7e777e77e7777777777777666
6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666677eee7ee77ee77ee777e7777777777777666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666777777777777777777777777777777777666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
666633366666666666666666666666666666666666666666666666666666666666666666666fff66666666666666666666666666666666666666666666666666
6333333336666666666666666666666666666666666666666666666666666666666666666ff777ff666666666666666666666666666666666666666666666666
63333333366666666666666666666666666666666666666666666666666666666666666ff7777777ff6666666666666666666666666666666666666666666666
633333333666666666666666666666666666666666666666666666666666666666666ff77777777777ff66666666666666666666666666666666666666666666
6333333336666666666666666666666666666666666666666666666666666666666ffffffffffffffffff6666666666666666666666666666666666666666666
63333333666666666666666666666666666666666666666666666666666666666666575775757757577566666666666666666666666666666666666666666666
66333333366666666666666666666666666666666666666666666666666666666666577575775757757566666666666666666666666666666666666666666666
663344433666666666666666666666666666666666666666666666666666666666ff9999999999999999ff666666666666666666666666666666666666666666
6664444666666666666666666666666666666666666666666666666666666666ff74447744477444774447ff6666666666666666666666666666666666666666
66644446666666666666666666666666666666666666666666666666666666ff777f47dd747dd747dd74f777ff66666666666666666666666666666666666666
666444466666666666666666666666666666666666666666666666666666ff77777f47dd747dd747dd74f77777ff666666666666666666666666666666666666
666444466666666666666666666666666666666666666666666666333333f777777f4777747777477774f777777f666666666666666666666666666666666666
666444466666666666666666666666666666666666666666666663333373ffffffff4ffff4ffff4ffff4ffffffff666666666666666666666666666666666666
6644444466666666666666666666666666666666666666666666633733337777777f4777747777477774f7777777666666666666666666666666666666666666
66444444666666666666666666666666666666666666666666663333333377ddd77f47dd747dd747dd74f77ddd77666666666666666666666666666666666666
d44444444ddddddddddddddddddddddddddddddddddddddddddd3733373777ddd77f47dd747dd747dd74f77ddd77dddddddddddddddddddddddddddddddddddd
dddddddddddddddddddddddddddddddddddddddddddddddddddd3337333377ddd77f47dd747dd747dd74f77ddd77dddddddddddddddddddddddddddddddddddd
ddddddddddddddddddddddddddddddddddddddddddddddddddddd444554477ddd77f47dd747dd747dd74f77ddd77dddddddddddddddddddddddddddddddddddd
ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddffffffff4ffff4fddf4ffff4ffffffffdddddddddddddddddddddddddddddddddddd
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd7777777f4777747dd7477774f7777777dddddddddddddddddddddddddddddddddddd
1111111111111111111111111111111111111111111111111111111111117777777444ff444dd444ff4447777777111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111117777777fff777777777777fff7777777111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111aaaa1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111aacaca111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111aacaca111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111a9aaaa111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111aa99aa111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111566665111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111115756657511111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111511115111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

